
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000032a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000168  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b7  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016e  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dd  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006f  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea e2       	ldi	r30, 0x2A	; 42
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a8 30       	cpi	r26, 0x08	; 8
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  b2:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <external_interrupt_init>:
uint8_t volatile key_was_pressed = 0;
uint8_t volatile IOInterruptEnabled = 1;
volatile uint8_t Lastbutton =0;

void external_interrupt_init(){
	PCMSK0 |= ((1<<UP)|(1<<DOWN)|(1<<ENTER)|(1<<CANCEL));
  ba:	eb e6       	ldi	r30, 0x6B	; 107
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	89 63       	ori	r24, 0x39	; 57
  c2:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);
  c4:	e8 e6       	ldi	r30, 0x68	; 104
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <__vector_4>:
}

//External Interrupt ausgeloest
ISR (PCINT0_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t button = PINA & ((1<<UP)|(1<<DOWN)|(1<<ENTER)|(1<<CANCEL));
  e6:	80 b1       	in	r24, 0x00	; 0
  e8:	89 73       	andi	r24, 0x39	; 57
  ea:	89 83       	std	Y+1, r24	; 0x01
	if(!button){
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	81 11       	cpse	r24, r1
  f0:	29 c0       	rjmp	.+82     	; 0x144 <__vector_4+0x74>
		if(IOInterruptEnabled) {
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	88 23       	and	r24, r24
  f8:	41 f1       	breq	.+80     	; 0x14a <__vector_4+0x7a>
			//IOInterruptEnabled = 0;
			key_was_pressed = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 03 01 	sts	0x0103, r24
			if(Lastbutton == (1<<CANCEL)){
 100:	80 91 02 01 	lds	r24, 0x0102
 104:	80 32       	cpi	r24, 0x20	; 32
 106:	11 f4       	brne	.+4      	; 0x10c <__vector_4+0x3c>
				menue_state = IDLE;
 108:	10 92 07 01 	sts	0x0107, r1
			}
			if(Lastbutton == (1<<ENTER)){
 10c:	80 91 02 01 	lds	r24, 0x0102
 110:	80 31       	cpi	r24, 0x10	; 16
 112:	51 f4       	brne	.+20     	; 0x128 <__vector_4+0x58>
				if (menue_state == IDLE)
 114:	80 91 07 01 	lds	r24, 0x0107
 118:	81 11       	cpse	r24, r1
 11a:	03 c0       	rjmp	.+6      	; 0x122 <__vector_4+0x52>
				{
					menue_state = MENUE_TIME;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 07 01 	sts	0x0107, r24
				}
				enter_was_pressed = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 06 01 	sts	0x0106, r24
			}
			if(Lastbutton == (1<<UP)){
 128:	80 91 02 01 	lds	r24, 0x0102
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	11 f4       	brne	.+4      	; 0x134 <__vector_4+0x64>
				up_was_pressed = 1;
 130:	80 93 05 01 	sts	0x0105, r24
			}
			if(Lastbutton == (1<<DOWN)){
 134:	80 91 02 01 	lds	r24, 0x0102
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	39 f4       	brne	.+14     	; 0x14a <__vector_4+0x7a>
				down_was_pressed = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 04 01 	sts	0x0104, r24
 142:	03 c0       	rjmp	.+6      	; 0x14a <__vector_4+0x7a>
			}
		}
	} else {
		Lastbutton = button;
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	80 93 02 01 	sts	0x0102, r24
	}
}
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:

int main(void)
{
	cli();
 15c:	f8 94       	cli
	external_interrupt_init();
 15e:	0e 94 5d 00 	call	0xba	; 0xba <external_interrupt_init>
	sei();
 162:	78 94       	sei
			{
				menue_state = MENUE_TIME;
			}
			if (up_was_pressed)
			{
				menue_state = MENUE_TIME;
 164:	51 e0       	ldi	r21, 0x01	; 1
				
			}
			key_was_pressed = 0;
			if (enter_was_pressed)
			{
				menue_state = MENUE_DISPLAY_TIME;
 166:	95 e0       	ldi	r25, 0x05	; 5
				display_state = DISPLAY_TIME_TEMP;
				menue_state = IDLE;
			}
			if (down_was_pressed)
			{
				menue_state = MENUE_DISPLAY_TIME_TEMP_LF;
 168:	47 e0       	ldi	r20, 0x07	; 7
			
			}
			key_was_pressed = 0;
			if (enter_was_pressed)
			{
				display_state = DISPLAY_TIME_TEMP;
 16a:	ab e0       	ldi	r26, 0x0B	; 11
				display_state = DISPLAY_TIME;
				menue_state = IDLE;
			}
			if (down_was_pressed)
			{
				menue_state = MENUE_DISPLAY_TIME_TEMP;
 16c:	36 e0       	ldi	r19, 0x06	; 6
				
			}
			key_was_pressed = 0;
			if (enter_was_pressed)
			{
				display_state = DISPLAY_TIME;
 16e:	fa e0       	ldi	r31, 0x0A	; 10
				
			}
			key_was_pressed = 0;
			if (enter_was_pressed)
			{
				display_state = DISPLAY_TIME_TEMP_LF;
 170:	ec e0       	ldi	r30, 0x0C	; 12
			{
				menue_state = MENUE_DISPLAY;
			}
			if (up_was_pressed)
			{
				menue_state = MENUE_DISPLAY;
 172:	24 e0       	ldi	r18, 0x04	; 4
				
			}
			key_was_pressed = 0;
			if (enter_was_pressed)
			{
				menue_state = MENUE_TIME_EDIT_H;
 174:	72 e0       	ldi	r23, 0x02	; 2
				
			}
			key_was_pressed = 0;
			if (enter_was_pressed)
			{
				menue_state = MENUE_TIME_EDIT_M;
 176:	63 e0       	ldi	r22, 0x03	; 3
{
	cli();
	external_interrupt_init();
	sei();
    while(1) {
		switch (menue_state) {
 178:	80 91 07 01 	lds	r24, 0x0107
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	09 f4       	brne	.+2      	; 0x182 <main+0x26>
 180:	49 c0       	rjmp	.+146    	; 0x214 <main+0xb8>
 182:	28 f4       	brcc	.+10     	; 0x18e <main+0x32>
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	61 f0       	breq	.+24     	; 0x1a0 <main+0x44>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	51 f1       	breq	.+84     	; 0x1e0 <main+0x84>
 18c:	f5 cf       	rjmp	.-22     	; 0x178 <main+0x1c>
 18e:	86 30       	cpi	r24, 0x06	; 6
 190:	09 f4       	brne	.+2      	; 0x194 <main+0x38>
 192:	83 c0       	rjmp	.+262    	; 0x29a <main+0x13e>
 194:	08 f4       	brcc	.+2      	; 0x198 <main+0x3c>
 196:	5e c0       	rjmp	.+188    	; 0x254 <main+0xf8>
 198:	87 30       	cpi	r24, 0x07	; 7
 19a:	09 f4       	brne	.+2      	; 0x19e <main+0x42>
 19c:	a1 c0       	rjmp	.+322    	; 0x2e0 <main+0x184>
 19e:	ec cf       	rjmp	.-40     	; 0x178 <main+0x1c>
		case IDLE:
			// LCD Display Mode
			break;
		case MENUE_TIME:
		//LCD Zeit einstellen
			key_was_pressed = 0;
 1a0:	10 92 03 01 	sts	0x0103, r1
			while (key_was_pressed == 0)
 1a4:	80 91 03 01 	lds	r24, 0x0103
 1a8:	88 23       	and	r24, r24
 1aa:	e1 f3       	breq	.-8      	; 0x1a4 <main+0x48>
			{
				
			}
			key_was_pressed = 0;
 1ac:	10 92 03 01 	sts	0x0103, r1
			if (enter_was_pressed)
 1b0:	80 91 06 01 	lds	r24, 0x0106
 1b4:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_TIME_EDIT_H;
 1b6:	70 93 07 01 	sts	0x0107, r23
			}
			if (down_was_pressed)
 1ba:	80 91 04 01 	lds	r24, 0x0104
 1be:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY;
 1c0:	20 93 07 01 	sts	0x0107, r18
			}
			if (up_was_pressed)
 1c4:	80 91 05 01 	lds	r24, 0x0105
 1c8:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY;
 1ca:	20 93 07 01 	sts	0x0107, r18
			}
			enter_was_pressed = 0;
 1ce:	10 92 06 01 	sts	0x0106, r1
			up_was_pressed = 0;
 1d2:	10 92 05 01 	sts	0x0105, r1
			down_was_pressed = 0;
 1d6:	10 92 04 01 	sts	0x0104, r1
			key_was_pressed = 0;
 1da:	10 92 03 01 	sts	0x0103, r1
			break;
 1de:	cc cf       	rjmp	.-104    	; 0x178 <main+0x1c>
		case MENUE_TIME_EDIT_H:
		//LCD 
			key_was_pressed = 0;
 1e0:	10 92 03 01 	sts	0x0103, r1
			while (key_was_pressed == 0)
 1e4:	80 91 03 01 	lds	r24, 0x0103
 1e8:	88 23       	and	r24, r24
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <main+0x88>
			{
				
			}
			key_was_pressed = 0;
 1ec:	10 92 03 01 	sts	0x0103, r1
			if (enter_was_pressed)
 1f0:	80 91 06 01 	lds	r24, 0x0106
 1f4:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_TIME_EDIT_M;
 1f6:	60 93 07 01 	sts	0x0107, r22
			}
			if (down_was_pressed)
 1fa:	80 91 04 01 	lds	r24, 0x0104
			{
				// Studnen -1
			}
			if (up_was_pressed)
 1fe:	80 91 05 01 	lds	r24, 0x0105
			{
				// Studen +1
			}
			enter_was_pressed = 0;
 202:	10 92 06 01 	sts	0x0106, r1
			up_was_pressed = 0;
 206:	10 92 05 01 	sts	0x0105, r1
			down_was_pressed = 0;
 20a:	10 92 04 01 	sts	0x0104, r1
			key_was_pressed = 0;
 20e:	10 92 03 01 	sts	0x0103, r1
			break;
 212:	b2 cf       	rjmp	.-156    	; 0x178 <main+0x1c>
		case MENUE_DISPLAY:
			// LCD Nur Urzeit
			key_was_pressed = 0;
 214:	10 92 03 01 	sts	0x0103, r1
			while (key_was_pressed == 0)
 218:	80 91 03 01 	lds	r24, 0x0103
 21c:	88 23       	and	r24, r24
 21e:	e1 f3       	breq	.-8      	; 0x218 <main+0xbc>
			{
				
			}
			key_was_pressed = 0;
 220:	10 92 03 01 	sts	0x0103, r1
			if (enter_was_pressed)
 224:	80 91 06 01 	lds	r24, 0x0106
 228:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY_TIME;
 22a:	90 93 07 01 	sts	0x0107, r25
			}
			if (down_was_pressed)
 22e:	80 91 04 01 	lds	r24, 0x0104
 232:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_TIME;
 234:	50 93 07 01 	sts	0x0107, r21
			}
			if (up_was_pressed)
 238:	80 91 05 01 	lds	r24, 0x0105
 23c:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_TIME;
 23e:	50 93 07 01 	sts	0x0107, r21
			}
			enter_was_pressed = 0;
 242:	10 92 06 01 	sts	0x0106, r1
			up_was_pressed = 0;
 246:	10 92 05 01 	sts	0x0105, r1
			down_was_pressed = 0;
 24a:	10 92 04 01 	sts	0x0104, r1
			key_was_pressed = 0;
 24e:	10 92 03 01 	sts	0x0103, r1
			break;
 252:	92 cf       	rjmp	.-220    	; 0x178 <main+0x1c>
		case MENUE_DISPLAY_TIME:
			key_was_pressed = 0;
 254:	10 92 03 01 	sts	0x0103, r1
			//LCD Nur Uhrzeit
			while (key_was_pressed == 0)
 258:	80 91 03 01 	lds	r24, 0x0103
 25c:	88 23       	and	r24, r24
 25e:	e1 f3       	breq	.-8      	; 0x258 <main+0xfc>
			{
				
			}
			key_was_pressed = 0;
 260:	10 92 03 01 	sts	0x0103, r1
			if (enter_was_pressed)
 264:	80 91 06 01 	lds	r24, 0x0106
 268:	88 23       	and	r24, r24
 26a:	21 f0       	breq	.+8      	; 0x274 <main+0x118>
			{
				display_state = DISPLAY_TIME;
 26c:	f0 93 01 01 	sts	0x0101, r31
				menue_state = IDLE;
 270:	10 92 07 01 	sts	0x0107, r1
			}
			if (down_was_pressed)
 274:	80 91 04 01 	lds	r24, 0x0104
 278:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY_TIME_TEMP;
 27a:	30 93 07 01 	sts	0x0107, r19
			}
			if (up_was_pressed)
 27e:	80 91 05 01 	lds	r24, 0x0105
 282:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY_TIME_TEMP_LF;
 284:	40 93 07 01 	sts	0x0107, r20
			}
			enter_was_pressed = 0;
 288:	10 92 06 01 	sts	0x0106, r1
			up_was_pressed = 0;
 28c:	10 92 05 01 	sts	0x0105, r1
			down_was_pressed = 0;
 290:	10 92 04 01 	sts	0x0104, r1
			key_was_pressed = 0;
 294:	10 92 03 01 	sts	0x0103, r1
			break;
 298:	6f cf       	rjmp	.-290    	; 0x178 <main+0x1c>
		case MENUE_DISPLAY_TIME_TEMP:
			key_was_pressed = 0;
 29a:	10 92 03 01 	sts	0x0103, r1
			//LCD Nur Uhrzeit
			while (key_was_pressed == 0)
 29e:	80 91 03 01 	lds	r24, 0x0103
 2a2:	88 23       	and	r24, r24
 2a4:	e1 f3       	breq	.-8      	; 0x29e <main+0x142>
			{
			
			}
			key_was_pressed = 0;
 2a6:	10 92 03 01 	sts	0x0103, r1
			if (enter_was_pressed)
 2aa:	80 91 06 01 	lds	r24, 0x0106
 2ae:	88 23       	and	r24, r24
 2b0:	21 f0       	breq	.+8      	; 0x2ba <main+0x15e>
			{
				display_state = DISPLAY_TIME_TEMP;
 2b2:	a0 93 01 01 	sts	0x0101, r26
				menue_state = IDLE;
 2b6:	10 92 07 01 	sts	0x0107, r1
			}
			if (down_was_pressed)
 2ba:	80 91 04 01 	lds	r24, 0x0104
 2be:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY_TIME_TEMP_LF;
 2c0:	40 93 07 01 	sts	0x0107, r20
			}
			if (up_was_pressed)
 2c4:	80 91 05 01 	lds	r24, 0x0105
 2c8:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY_TIME;
 2ca:	90 93 07 01 	sts	0x0107, r25
			}
			enter_was_pressed = 0;
 2ce:	10 92 06 01 	sts	0x0106, r1
			up_was_pressed = 0;
 2d2:	10 92 05 01 	sts	0x0105, r1
			down_was_pressed = 0;
 2d6:	10 92 04 01 	sts	0x0104, r1
			key_was_pressed = 0;
 2da:	10 92 03 01 	sts	0x0103, r1
			break;
 2de:	4c cf       	rjmp	.-360    	; 0x178 <main+0x1c>
		case MENUE_DISPLAY_TIME_TEMP_LF:
			key_was_pressed = 0;
 2e0:	10 92 03 01 	sts	0x0103, r1
			//LCD Nur Uhrzeit
			while (key_was_pressed == 0)
 2e4:	80 91 03 01 	lds	r24, 0x0103
 2e8:	88 23       	and	r24, r24
 2ea:	e1 f3       	breq	.-8      	; 0x2e4 <main+0x188>
			{
				
			}
			key_was_pressed = 0;
 2ec:	10 92 03 01 	sts	0x0103, r1
			if (enter_was_pressed)
 2f0:	80 91 06 01 	lds	r24, 0x0106
 2f4:	88 23       	and	r24, r24
 2f6:	21 f0       	breq	.+8      	; 0x300 <main+0x1a4>
			{
				display_state = DISPLAY_TIME_TEMP_LF;
 2f8:	e0 93 01 01 	sts	0x0101, r30
				menue_state = IDLE;
 2fc:	10 92 07 01 	sts	0x0107, r1
			}
			if (down_was_pressed)
 300:	80 91 04 01 	lds	r24, 0x0104
 304:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY_TIME;
 306:	90 93 07 01 	sts	0x0107, r25
			}
			if (up_was_pressed)
 30a:	80 91 05 01 	lds	r24, 0x0105
 30e:	81 11       	cpse	r24, r1
			{
				menue_state = MENUE_DISPLAY_TIME_TEMP;
 310:	30 93 07 01 	sts	0x0107, r19
			}
			enter_was_pressed = 0;
 314:	10 92 06 01 	sts	0x0106, r1
			up_was_pressed = 0;
 318:	10 92 05 01 	sts	0x0105, r1
			down_was_pressed = 0;
 31c:	10 92 04 01 	sts	0x0104, r1
			key_was_pressed = 0;
 320:	10 92 03 01 	sts	0x0103, r1
			break;
 324:	29 cf       	rjmp	.-430    	; 0x178 <main+0x1c>

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
